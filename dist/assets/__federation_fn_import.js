import{_ as c}from"./preload-helper-101896b7.js";const o={react:{get:()=>()=>i("./__federation_shared_react.js"),import:!0},"react-dom":{get:()=>()=>i("./__federation_shared_react-dom.js"),import:!0},mobx:{get:()=>()=>i("./__federation_shared_mobx.js"),import:!0},"mobx-react-lite":{get:()=>()=>i("./__federation_shared_mobx-react-lite.js"),import:!0}},s=Object.create(null);async function p(e,t="default"){return s[e]?new Promise(r=>r(s[e])):await u(e,t)||l(e)}async function i(e){return c(()=>import(e),[])}async function u(e,t){let r=null;if(globalThis?.__federation_shared__?.[t]?.[e]){const a=globalThis.__federation_shared__[t][e],_=Object.keys(a)[0],n=Object.values(a)[0];if(o[e]?.requiredVersion){const d=(await c(()=>import("./__federation_lib_semver.js"),[])).satisfy;d(_,o[e].requiredVersion)?r=(await n.get())():console.log(`provider support ${e}(${_}) is not satisfied requiredVersion(${o[e].requiredVersion})`)}else r=(await n.get())()}if(r)return s[e]=r,r}async function l(e,t){if(o[e]?.import){const r=(await o[e].get())();return s[e]=r,r}else console.error("consumer config import=false,so cant use callback shared module")}export{p as importShared,l as importSharedLocal,u as importSharedRuntime};
